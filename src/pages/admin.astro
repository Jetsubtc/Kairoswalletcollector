---
import '../styles/global.css';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Admin - Kairos Prediction Game</title>
    <style>
      body {
        background-color: #0f172a;
        color: #ffffff;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        margin: 0;
        padding: 20px;
      }
      
      .container {
        max-width: 1200px;
        margin: 0 auto;
      }
      
      .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #334155;
      }
      
      .title {
        font-size: 2rem;
        margin: 0;
      }
      
      .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }
      
      .stat-card {
        background: #1e293b;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #334155;
      }
      
      .stat-title {
        font-size: 0.9rem;
        color: #94a3b8;
        margin: 0 0 10px 0;
      }
      
      .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        margin: 0;
        color: #60a5fa;
      }
      
      .card {
        background: #1e293b;
        border-radius: 8px;
        padding: 25px;
        margin-bottom: 30px;
        border: 1px solid #334155;
      }
      
      .card-title {
        font-size: 1.5rem;
        margin-top: 0;
        margin-bottom: 20px;
        color: #e2e8f0;
      }
      
      .form-group {
        margin-bottom: 20px;
      }
      
      .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
      }
      
      .form-input {
        width: 100%;
        padding: 12px;
        background: #334155;
        border: 1px solid #475569;
        border-radius: 4px;
        color: white;
        font-size: 1rem;
      }
      
      .btn {
        background: #3b82f6;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        margin-right: 10px;
      }
      
      .btn:hover {
        background: #2563eb;
      }
      
      .btn.secondary {
        background: #64748b;
      }
      
      .btn.secondary:hover {
        background: #475569;
      }
      
      .wallet-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      
      .wallet-table th {
        text-align: left;
        padding: 12px;
        background: #334155;
        border-bottom: 2px solid #475569;
      }
      
      .wallet-table td {
        padding: 12px;
        border-bottom: 1px solid #334155;
      }
      
      .wallet-table tr:hover {
        background: #334155;
      }
      
      .message {
        padding: 15px;
        border-radius: 4px;
        margin: 20px 0;
        display: none;
      }
      
      .message.error {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
      }
      
      .message.success {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
      }
      
      .hidden {
        display: none;
      }
      
      .wallet-list-container {
        max-height: 500px;
        overflow-y: auto;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 class="title">Admin Dashboard</h1>
        <button id="logoutBtn" class="btn secondary">Logout</button>
      </div>
      
      <div id="loginSection" class="card">
        <h2 class="card-title">Admin Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              required
              class="form-input"
            />
          </div>
          
          <button type="submit" class="btn">Login</button>
        </form>
        
        <div id="loginMessage" class="message"></div>
      </div>
      
      <div id="dashboardSection" class="hidden">
        <div class="stats">
          <div class="stat-card">
            <h3 class="stat-title">Total Wallets</h3>
            <p id="walletCount" class="stat-value">0</p>
          </div>
          
          <div class="stat-card">
            <h3 class="stat-title">Last Updated</h3>
            <p id="lastUpdated" class="stat-value">-</p>
          </div>
        </div>
        
        <div class="card">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h2 class="card-title">Wallet Submissions</h2>
            <button id="exportBtn" class="btn">Export CSV</button>
          </div>
          
          <div class="wallet-list-container">
            <table class="wallet-table">
              <thead>
                <tr>
                  <th>User Name</th>
                  <th>Wallet Address</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody id="walletTableBody">
                <tr>
                  <td colspan="3" style="text-align: center; color: #94a3b8;">No wallets found</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <script is:inline>
      // Check if already logged in
      const token = localStorage.getItem('adminToken');
      if (token) {
        showDashboard();
        loadDashboardData();
      }
      
      // Login form handler
      document.getElementById('loginForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const password = document.getElementById('password').value;
        const loginMessage = document.getElementById('loginMessage');
        
        try {
          // In a real app, you would send this to an API endpoint
          // For this demo, we'll just check against our hardcoded password
          if (password === 'admin123') {
            localStorage.setItem('adminToken', password);
            showDashboard();
            loadDashboardData();
          } else {
            showMessage(loginMessage, 'Invalid password', 'error');
          }
        } catch (error) {
          console.error('Login error:', error);
          showMessage(loginMessage, 'Login failed', 'error');
        }
      });
      
      // Logout handler
      document.getElementById('logoutBtn').addEventListener('click', function() {
        localStorage.removeItem('adminToken');
        showLogin();
      });
      
      // Export handler
      document.getElementById('exportBtn').addEventListener('click', async function() {
        try {
          const response = await fetch('/api/admin/wallets', {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            if (data.success) {
              // Create CSV content
              let csvContent = "Twitter Handle,Wallet Address,Timestamp\n";
              data.wallets.forEach(wallet => {
                csvContent += `"${wallet.twitterHandle}","${wallet.walletAddress}","${wallet.timestamp}"\n`;
              });
              
              // Create download link
              const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.setAttribute('href', url);
              link.setAttribute('download', `wallets-${new Date().toISOString().split('T')[0]}.csv`);
              link.style.visibility = 'hidden';
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
            } else {
              alert('Failed to export data: ' + data.message);
            }
          } else {
            alert('Unauthorized. Please login again.');
            showLogin();
          }
        } catch (error) {
          console.error('Export error:', error);
          alert('Export failed');
        }
      });
      
      // Show dashboard
      function showDashboard() {
        document.getElementById('loginSection').classList.add('hidden');
        document.getElementById('dashboardSection').classList.remove('hidden');
      }
      
      // Show login
      function showLogin() {
        document.getElementById('loginSection').classList.remove('hidden');
        document.getElementById('dashboardSection').classList.add('hidden');
        document.getElementById('loginForm').reset();
        document.getElementById('loginMessage').style.display = 'none';
      }
      
      // Show message function
      function showMessage(element, text, type) {
        element.textContent = text;
        element.className = 'message ' + type;
        element.style.display = 'block';
        
        // Hide message after 5 seconds
        setTimeout(() => {
          element.style.display = 'none';
        }, 5000);
      }
      
      // Load dashboard data
      async function loadDashboardData() {
        try {
          const response = await fetch('/api/admin/wallets', {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            if (data.success) {
              document.getElementById('walletCount').textContent = data.count;
              document.getElementById('lastUpdated').textContent = new Date().toLocaleString();
              
              const tableBody = document.getElementById('walletTableBody');
              if (data.wallets.length > 0) {
                tableBody.innerHTML = '';
                // Show all submissions (most recent first)
                const wallets = data.wallets.reverse();
                wallets.forEach(wallet => {
                  const row = document.createElement('tr');
                  
                  // Format the date
                  const date = new Date(wallet.timestamp);
                  const formattedDate = date.toLocaleString();
                  
                  row.innerHTML = `
                    <td>${wallet.twitterHandle}</td>
                    <td style="font-family: monospace;">${wallet.walletAddress}</td>
                    <td>${formattedDate}</td>
                  `;
                  tableBody.appendChild(row);
                });
              } else {
                tableBody.innerHTML = '<tr><td colspan="3" style="text-align: center; color: #94a3b8;">No wallets found</td></tr>';
              }
            } else {
              alert('Failed to load data: ' + data.message);
              showLogin();
            }
          } else {
            alert('Unauthorized. Please login again.');
            showLogin();
          }
        } catch (error) {
          console.error('Dashboard load error:', error);
          alert('Failed to load dashboard data');
        }
      }
    </script>
  </body>
</html>